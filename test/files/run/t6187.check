
scala> import scala.language.experimental.macros, scala.reflect.macros.blackbox.Context
import scala.language.experimental.macros
import scala.reflect.macros.blackbox.Context

scala> def macroImpl[T: c.WeakTypeTag](c: Context)(t: c.Expr[T]): c.Expr[List[T]] = {
  val r = c.universe.reify { List(t.splice) }
  c.Expr[List[T]]( c.untypecheck(r.tree) )
}
def macroImpl[T](c: scala.reflect.macros.blackbox.Context)(t: c.Expr[T])(implicit evidence$1: c.WeakTypeTag[T]): c.Expr[List[T]]

scala> def demo[T](t: T): List[T] = macro macroImpl[T]
def demo[T](t: T): List[T]

scala> def m[T](t: T): List[List[T]] =
  demo( List((t,true)) collect { case (x,true) => x } )
def m[T](t: T): List[List[T]]

scala> m(List(1))
val res0: List[List[List[Int]]] = List(List(List(1)))

scala> // Showing we haven't added unreachable warnings

scala> List(1) collect { case x => x }
val res1: List[Int] = List(1)

scala> List("") collect { case x => x }
val res2: List[String] = List("")

scala> :quit
