
scala> class X {
   def methodIntIntInt(x: Int, y: Int) = x+y
}
class X

scala> 

scala> import scala.reflect.runtime.universe._
import scala.reflect.runtime.universe._

scala> import scala.reflect.runtime.{ currentMirror => cm }
import scala.reflect.runtime.{currentMirror=>cm}

scala> def im: InstanceMirror = cm.reflect(new X)
def im: reflect.runtime.universe.InstanceMirror

scala> val cs: ClassSymbol = im.symbol
val cs: reflect.runtime.universe.ClassSymbol = class X

scala> val ts: Type = cs.info
val ts: reflect.runtime.universe.Type =
AnyRef {
  def <init>(): X
  def methodIntIntInt(x: Int, y: Int): Int
}

scala> val ms: MethodSymbol = ts.decl(TermName("methodIntIntInt")).asMethod
val ms: reflect.runtime.universe.MethodSymbol = method methodIntIntInt

scala> val MethodType( _, t1 ) = ms.info
val t1: reflect.runtime.universe.Type = Int

scala> val t2 = typeOf[scala.Int]
val t2: reflect.runtime.universe.Type = Int

scala> t1 == t2
val res0: Boolean = false

scala> t1 =:= t2
val res1: Boolean = true

scala> t1 <:< t2
val res2: Boolean = true

scala> t2 <:< t1
val res3: Boolean = true

scala> :quit
