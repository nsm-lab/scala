[[syntax trees at end of                lambdalift]] // newSource1.scala
package <empty> {
  class T extends Object {
    <paramaccessor> private[this] val classParam: String = _;
    def <init>(classParam: String): T = {
      T.super.<init>();
      ()
    };
    private[this] val field: String = "";
    <stable> <accessor> def field(): String = T.this.field;
    def foo(methodParam: String): Function0 = {
      val methodLocal: String = "";
      {
        (() => T.this.$anonfun$foo$1(methodParam, methodLocal))
      }
    };
    def bar(barParam: String): Object = {
      lazy <artifact> val MethodLocalObject$module: scala.runtime.LazyRef = new scala.runtime.LazyRef();
      T.this.MethodLocalObject$2(MethodLocalObject$module, barParam)
    };
    def tryy(tryyParam: String): Function0 = {
      var tryyLocal: runtime.ObjectRef = scala.runtime.ObjectRef.create("");
      {
        (() => T.this.$anonfun$tryy$1(tryyLocal, tryyParam))
      }
    };
    final <artifact> private[this] def $anonfun$foo$1(methodParam$1: String, methodLocal$1: String): String = T.this.classParam.+(T.this.field()).+(methodParam$1).+(methodLocal$1);
    abstract trait MethodLocalTrait$1 extends Object {
      def /*MethodLocalTrait$1*/$init$(barParam$1: String): Unit = {
        ()
      };
      scala.Predef.print(barParam$1);
      <synthetic> <stable> <artifact> def $outer(): T
    };
    object MethodLocalObject$1 extends Object with T#MethodLocalTrait$1 {
      def <init>($outer: T, barParam$1: String): T#MethodLocalObject$1.type = {
        MethodLocalObject$1.super.<init>();
        MethodLocalObject$1.super./*MethodLocalTrait$1*/$init$(barParam$1);
        ()
      };
      <synthetic> <paramaccessor> <artifact> private[this] val $outer: T = _;
      <synthetic> <stable> <artifact> def $outer(): T = MethodLocalObject$1.this.$outer;
      <synthetic> <stable> <artifact> def $outer(): T = MethodLocalObject$1.this.$outer
    };
    final <artifact> private[this] def MethodLocalObject$lzycompute$1(MethodLocalObject$module$1: scala.runtime.LazyRef, barParam$1: String): T#MethodLocalObject$1.type = MethodLocalObject$module$1.synchronized[T#MethodLocalObject$1.type](if (MethodLocalObject$module$1.initialized())
      MethodLocalObject$module$1.value().$asInstanceOf[T#MethodLocalObject$1.type]()
    else
      MethodLocalObject$module$1.initialize(new T#MethodLocalObject$1.type(T.this, barParam$1)).$asInstanceOf[T#MethodLocalObject$1.type]());
    final private[this] def MethodLocalObject$2(MethodLocalObject$module$1: scala.runtime.LazyRef, barParam$1: String): T#MethodLocalObject$1.type = if (MethodLocalObject$module$1.initialized())
      MethodLocalObject$module$1.value().$asInstanceOf[T#MethodLocalObject$1.type]()
    else
      T.this.MethodLocalObject$lzycompute$1(MethodLocalObject$module$1, barParam$1);
    final <artifact> private[this] def $anonfun$tryy$1(tryyLocal$1: runtime.ObjectRef, tryyParam$1: String): Unit = try {
      tryyLocal$1.elem = tryyParam$1
    } finally ()
  }
}

warning: 1 feature warning; re-run with -feature for details
