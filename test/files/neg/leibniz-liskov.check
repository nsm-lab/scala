leibniz-liskov.scala:7: error: Cannot prove that LeibnizLiskov.this.A =:= LeibnizLiskov.this.B.
  implicitly[A =:= B]
            ^
leibniz-liskov.scala:8: error: Cannot prove that LeibnizLiskov.this.B =:= LeibnizLiskov.this.A.
  implicitly[B =:= A]
            ^
leibniz-liskov.scala:11: error: Cannot prove that LeibnizLiskov.this.A <:< LeibnizLiskov.this.SA.
  implicitly[A <:< SA]
            ^
leibniz-liskov.scala:12: error: Cannot prove that LeibnizLiskov.this.SB <:< LeibnizLiskov.this.B.
  implicitly[SB <:< B]
            ^
leibniz-liskov.scala:13: error: Cannot prove that LeibnizLiskov.this.SA <:< LeibnizLiskov.this.B.
  implicitly[SA <:< B]
            ^
leibniz-liskov.scala:14: error: Cannot prove that LeibnizLiskov.this.A <:< LeibnizLiskov.this.SB.
  implicitly[A <:< SB]
            ^
leibniz-liskov.scala:18: error: no type parameters for method substituteCo: (ff: F[LeibnizLiskov.this.A]): F[LeibnizLiskov.this.B] exist so that it can be applied to arguments (List[LeibnizLiskov.this.B])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : List[LeibnizLiskov.this.B]
 required: ?F[LeibnizLiskov.this.A]
  aEqB.substituteCo    (List(B(), B(), B()))
       ^
leibniz-liskov.scala:18: error: type mismatch;
 found   : List[LeibnizLiskov.this.B]
 required: F[LeibnizLiskov.this.A]
  aEqB.substituteCo    (List(B(), B(), B()))
                            ^
leibniz-liskov.scala:19: error: no type parameters for method substituteContra: (ft: F[LeibnizLiskov.this.B]): F[LeibnizLiskov.this.A] exist so that it can be applied to arguments (List[LeibnizLiskov.this.A])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : List[LeibnizLiskov.this.A]
 required: ?F[LeibnizLiskov.this.B]
  aEqB.substituteContra(List(A(), A(), A()))
       ^
leibniz-liskov.scala:19: error: type mismatch;
 found   : List[LeibnizLiskov.this.A]
 required: F[LeibnizLiskov.this.B]
  aEqB.substituteContra(List(A(), A(), A()))
                            ^
leibniz-liskov.scala:20: error: Cannot prove that xs.type <:< List[LeibnizLiskov.this.B].
  locally { val xs = aEqB.flip.liftCo[List](List(B(), B(), B())); implicitly[xs.type <:< List[B]] }
                                                                            ^
leibniz-liskov.scala:21: error: no type parameters for method substituteContra: (ft: F[U]): F[T] exist so that it can be applied to arguments (List[T])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : List[T]
 required: ?F[U]
  def convert1[T, U](l: List[T])(ev: T =:= U): List[U] = ev.substituteContra(l)
                                                            ^
leibniz-liskov.scala:21: error: type mismatch;
 found   : List[T]
 required: F[U]
  def convert1[T, U](l: List[T])(ev: T =:= U): List[U] = ev.substituteContra(l)
                                                                             ^
leibniz-liskov.scala:21: error: type mismatch;
 found   : F[T]
 required: List[U]
  def convert1[T, U](l: List[T])(ev: T =:= U): List[U] = ev.substituteContra(l)
                                                                            ^
leibniz-liskov.scala:22: error: no type parameters for method substituteCo: (ff: F[T]): F[U] exist so that it can be applied to arguments (List[U])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : List[U]
 required: ?F[T]
  def convert2[T, U](l: List[U])(ev: T =:= U): List[T] = ev.substituteCo(l)
                                                            ^
leibniz-liskov.scala:22: error: type mismatch;
 found   : List[U]
 required: F[T]
  def convert2[T, U](l: List[U])(ev: T =:= U): List[T] = ev.substituteCo(l)
                                                                         ^
leibniz-liskov.scala:22: error: type mismatch;
 found   : F[U]
 required: List[T]
  def convert2[T, U](l: List[U])(ev: T =:= U): List[T] = ev.substituteCo(l)
                                                                        ^
leibniz-liskov.scala:30: error: kinds of the type arguments ([-Y]Y => LeibnizLiskov.this.A) do not conform to the expected kinds of the type parameters (type F).
[-Y]Y => LeibnizLiskov.this.A's type parameters do not match type F's expected parameters:
type Y is contravariant, but type _ is declared covariant
  locally { val f = bSubA.substituteCo    [To  [A]#L](aSubB(_)); implicitly[f.type <:< (A => A)] }
                                          ^
leibniz-liskov.scala:31: error: kinds of the type arguments ([+Y]LeibnizLiskov.this.A => Y) do not conform to the expected kinds of the type parameters (type F).
[+Y]LeibnizLiskov.this.A => Y's type parameters do not match type F's expected parameters:
type Y is covariant, but type _ is declared contravariant
  locally { val f = aSubB.substituteContra[From[A]#L](bSubA(_)); implicitly[f.type <:< (A => A)] }
                                          ^
leibniz-liskov.scala:32: error: kinds of the type arguments (List) do not conform to the expected kinds of the type parameters (type F).
List's type parameters do not match type F's expected parameters:
type A is covariant, but type _ is declared contravariant
  def convertSub[T, U](l: List[T])(ev: T <:< U): List[U] = ev.liftContra[List](l)
                                                                        ^
leibniz-liskov.scala:34: error: kinds of the type arguments (LeibnizLiskov.this.Consumes) do not conform to the expected kinds of the type parameters (type F).
LeibnizLiskov.this.Consumes's type parameters do not match type F's expected parameters:
type X is contravariant, but type _ is declared covariant
  def convertConsume1[U, T](c: Consumes[T])(ev: U <:< T): Consumes[U] = ev.liftCo[Consumes](c)
                                                                                 ^
leibniz-liskov.scala:35: error: no type parameters for method substituteCo: (ff: F[U]): F[T] exist so that it can be applied to arguments (LeibnizLiskov.this.Consumes[T])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : LeibnizLiskov.this.Consumes[T]
    (which expands to)  T => Unit
 required: ?F[U]
  def convertConsume2[U, T](c: Consumes[T])(ev: U <:< T): Consumes[U] = ev.substituteCo(c)
                                                                           ^
leibniz-liskov.scala:35: error: type mismatch;
 found   : LeibnizLiskov.this.Consumes[T]
    (which expands to)  T => Unit
 required: F[U]
  def convertConsume2[U, T](c: Consumes[T])(ev: U <:< T): Consumes[U] = ev.substituteCo(c)
                                                                                        ^
leibniz-liskov.scala:35: error: type mismatch;
 found   : F[T]
 required: LeibnizLiskov.this.Consumes[U]
    (which expands to)  U => Unit
  def convertConsume2[U, T](c: Consumes[T])(ev: U <:< T): Consumes[U] = ev.substituteCo(c)
                                                                                       ^
24 errors
