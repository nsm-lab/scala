Test.scala:4: error: class C1 inherits conflicting members:
  <defaultmethod> def f(): Int (defined in trait A) and
  def f: Int (defined in trait T)
  (note: this can be resolved by declaring an `override` in class C1.)
class C1 extends A with T // error
      ^
Test.scala:5: error: cannot override a concrete member without a third member that's overridden by both (this rule is designed to prevent ``accidental overrides'')
def f: Int (defined in trait T)
  with <defaultmethod> def f(): Int (defined in trait A)
class C2 extends T with A // error
      ^
Test.scala:14: error: `override` modifier required to override concrete member:
<defaultmethod> def f(): Int (defined in trait A)
  def f() = 9999 // need override modifier
      ^
3 errors
